# -*- coding: utf-8 -*-
"""Copy of AI_Study_Assistant

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FqHqSXIoiQlWfqgQo_MwJXBAnaUUzCHD
"""

!pip install openai==0.28

!pip install openai gradio python-docx PyPDF2 --quiet

# 📦 Install dependencies
!pip install gradio python-docx PyPDF2 openai --quiet

# 📚 Imports
import gradio as gr
import openai
from docx import Document
import PyPDF2

# 🔐 Your OpenAI API Key
import os
openai.api_key = "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"  # 🔑 Replace with your Groq API key
openai.api_base = "https://api.groq.com/openai/v1"

# 📤 File reader
def extract_text(file):
    text = ""
    if file.name.endswith(".pdf"):
        reader = PyPDF2.PdfReader(file)
        for page in reader.pages:
            page_text = page.extract_text()
            if page_text:
                text += page_text
    elif file.name.endswith(".docx"):
        doc = Document(file)
        for para in doc.paragraphs:
            text += para.text + "\n"
    return text.strip()

# 🧠 AI processor
def process_doc(file, target_language):
    if file is None:
        return ["⚠️ Please upload a file."] * 5

    content = extract_text(file)
    if not content:
        return ["⚠️ File is empty or unreadable."] * 5

    prompts = {
        "summary": f"Summarize this:\n{content}",
        "points": f"List key points:\n{content}",
        "definitions": f"Extract and define important terms:\n{content}",
        "questions": f"Generate exam/quiz questions:\n{content}",
        "translation": f"Translate into {target_language}:\n{content}"
    }

    responses = []
    for task, prompt in prompts.items():
        try:
            # Corrected OpenAI API call for openai==0.28
            res = openai.ChatCompletion.create(
                model="llama3-70b-8192",  # Or your preferred Groq model
                messages=[{"role": "user", "content": prompt}]
            )
            responses.append(res['choices'][0]['message']['content'].strip())
        except Exception as e:
            responses.append(f"❌ Error: {str(e)}")

    return responses

# 🌈 Colorful, emoji-filled Gradio UI
with gr.Blocks(css="""
    .gr-textbox textarea { background-color: #fff8f0 !important; color: #333; font-size: 16px; }
    .gr-button { background: linear-gradient(45deg, #ff9a9e, #fad0c4) !important; border: none; color: #222; font-weight: bold; }
    .gr-file { background-color: #e0f7fa !important; }
    h1, h2 { color: #4a148c; }
""") as demo:
    gr.Markdown("<h1 style='text-align:center;'>🌟📚 <span style='color:#d81b60;'>AI Study Assistant</span> 📚🌟</h1>")
    gr.Markdown("<h3 style='text-align:center; color:#00796b;'>Upload your document and unlock smart summaries, definitions, and questions in any language!</h3>")

    with gr.Row():
        file_input = gr.File(label="📂 Upload your PDF or DOCX", file_types=[".pdf", ".docx"], type="filepath")

        lang_input = gr.Textbox(label="🌍 Translate to (e.g., Tamil, Hindi)", placeholder="Enter language name...")

    generate_btn = gr.Button("🚀 Generate Study Outputs")

    with gr.Row():
        summary_box = gr.Textbox(label="📘 Summarized Notes")
        points_box = gr.Textbox(label="✅ Important Points")

    with gr.Row():
        defs_box = gr.Textbox(label="📚 Definitions")
        qns_box = gr.Textbox(label="❓ Possible Questions")
        trans_box = gr.Textbox(label="🌐 Translation")

    generate_btn.click(
        fn=process_doc,
        inputs=[file_input, lang_input],
        outputs=[summary_box, points_box, defs_box, qns_box, trans_box]
    )

demo.launch(share=True)